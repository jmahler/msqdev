#!/usr/bin/perl
use strict;

#
# Copyright (C) 2011 Jeremiah Mahler <jmmahler@gmail.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

# This program automates the task of adjusting the ve values
# to achieve a desired mixture.
# This is similar to "autotune" in TunerStudio except that it currently
# only adjusts to a single air fuel ratio and does not use afrTable1.

use Text::LookUpTable;
use Time::HiRes qw(usleep);
use IO::Select;
use MSQ::RTData;
use IO::File;

# {{{ process @ARGV, config vars

# config variables
my $rtdata_in_file	= "rtdata"; # real time data file
my $goal_afr1		= 13.0;   	# goal air fuel ratio
my $change_delay	= 2;   		# change_delay in seconds
my $DEBUG			= 0;
my $tran_delay      = 3;        # delay in seconds after detection of
								# a transient condition

# constants
my $min_inc = 1;			# minimum increment amount 
my $pname = (split /\//, $0)[-1];  # name of this program without spaces
my $table_file = 'veTable1';

my $usage = <<"HERE";
  USAGE:

	$pname [<options>]

	  data is output to msq-ve_tuner-<time stamp>

  OPTIONS:      [default value]  description

    -rd         [$rtdata_in_file] real time data file
    -a          [$goal_afr1] air fuel ratio (goal)
    -cd         [$change_delay] time (seconds) to delay after a change
    -d          [$DEBUG] enable debugging (1) or disable (0)
    -i          [$min_inc] minimum increment amount
    -td         [$tran_delay] delay, in seconds, after detection of
                              a transient condition (large rpmdot or tpsDOT)
    -h          this screen

  RUNNING COMMANDS:

   ENTER        pause/resume recording
   Ctrl-C       quit

  OUTPUT FILES:

   msq-ve_tuner-*    real time data (rtdata) during tuning 
   cve-*.csv         convergence ve tuning (change of points over time)

HERE

# process @ARGV
{

my $i;

# utility for checking a required second argument
my $req_arg_fn = sub {
	my $op = shift;

	if (($i + 1) >= @ARGV) {
		print STDERR "option '$op' requires an argument. See help ($pname -h)\n";
		#print STDERR $usage;
		exit 1;
	}

	$i++;  # skip the second argument during the next iteration

	return $ARGV[$i];  # return the second argument
};

for ($i = 0; $i < @ARGV; $i++) {
	my $s1 = $ARGV[$i];

    if ($s1 eq '-h') {
		print $usage;
		exit;
    } elsif ($s1 eq '-rd') {
        $rtdata_in_file = $req_arg_fn->('-rd');
    } elsif ($s1 eq '-a') {
        $goal_afr1 = $req_arg_fn->('-a');
    } elsif ($s1 eq '-cd') {
        $change_delay = $req_arg_fn->('-cd');
    } elsif ($s1 eq '-d') {
        $DEBUG = $req_arg_fn->('-d');
    } elsif ($s1 eq '-i') {
        $min_inc = $req_arg_fn->('-i');
    } elsif ($s1 eq '-td') {
        $tran_delay = $req_arg_fn->('-td');
    } else {
		print STDERR "unkown option '$s1'. See help ($pname -h)\n";
		exit 1;
    }
}
}

# }}}

# {{{ setup data sources/sinks (filehandles)

# get a time stamp for creating a unique file
my ($month, $day, $year, $hour, $min, $sec) = (localtime)[4, 3, 5, 2, 1, 0];
$year += 1900;
$month += 1;
my $rtdata_out_file = sprintf("msq-ve_tuner-%d%02d%02d-%02d:%02d:%02d", $year, $month, $day, $hour, $min, $sec);

$| = 1;  # flush STDOUT after every print

my $s = IO::Select->new();
$s->add(\*STDIN);

my $table = Text::LookUpTable->load_file($table_file)
	or die "unable to open table in file '$table_file': $!\n" .
			"  use the -h option for usage information\n";
my $orig_table = $table->copy();

# For reading the incoming real time data.
my $rtdata_in = MSQ::RTData->new($rtdata_in_file)
	or die "unable to open file '$rtdata_in_file': $!\n";

# For saving the real time data that was used during recording.
#   This program can be paused/resumed, so this data is only
#   from when it is not paused.
my $rtdata_out = MSQ::RTData->new($rtdata_out_file, [$rtdata_in->columns])
	or die "unable to open file '$rtdata_out_file': $!\n";

# {{{ setup convergence ve tuning output file
my $cve_fh = new IO::File;

my $cve_file = sprintf("cve-a_$goal_afr1-cd_$change_delay-%d%02d%02d-%02d:%02d:%02d.csv", $year, $month, $day, $hour, $min, $sec);

if (-e $cve_file) {
	die "cve file '$cve_file' alreay exists! (it shouldn't)\n";
}

$cve_fh->open("> $cve_file")
	or die("unable to open file '$cve_file': $!\n");

print $cve_fh "time,veCurr1,group\n";
# }}}

# }}}

# {{{ sub quit()

# Quit operation used by signal handlers
sub quit {

	print "\n";
	print "keep current table (or restore original) [Y/n]? ";
	my $choice = <STDIN>;
	chomp($choice);

	if ($choice eq '' or lc($choice) eq 'y') {
		print "keeping current table\n";
	} else {
		print "restoring original table\n";
		$orig_table->save_file();
		`kill -HUP \`cat pid\``;
	}

	exit 0;
}
# }}}

# {{{ signal handlers, Ctrl-C

# Ctrl-C
$SIG{INT} = sub {
	quit();
};

# }}}

# start of main loop
print "Press ENTER to pause/resume tuning\n";
print "Press Ctrl-C to quit\n";

my %point_change;  # stores times when points were changed, to delay next change
my %cols = $rtdata_in->columns_hr();
$rtdata_in->seek_end();  # skip old data
my $has_changes = 0;  # flag used to trigger an update to the msqdev daemon
					  # after changes
my $tran_time = time();  # time of last transient detection,
						 # used along with $tran_delay
my $in_transient_delay = 1;  # used to reduce transient detection output

my $start_paused = 1;
while (1) {

	# {{{ ENTER menu, pause/resume
	if ($s->can_read(0) or $start_paused) {

		if ($start_paused) {
			$start_paused = 0;  # reset
		} else {
			<STDIN>;  # read and discard, reset input
		}

		print "PAUSED: press ENTER to resume\n";
		<STDIN>;  # block for ENTER

		# skip data collected while paused
		$rtdata_in->seek_end();
	}
	# }}}

	# Update the data
	#
	# The algorithm, in general, is as follows.
	# 
	# 1. Find the value at the nearest point of the recent data capture
	# 2. If the fuel mixture at that point is wrong try and adjust it.
	#
	# It does not account for rapid changes in acceleration or other
	# circumstance which may cause the afr to be inaccurate.
	# This is why it can be paused/resumed.
	#
	while (my $vals = $rtdata_in->getline()) {

		# Check for a transient,
		# reset the $tran_time if one found
		my $rpmdot = $vals->[$cols{rpmdot}];
		my $tpsDOT = $vals->[$cols{tpsDOT}];
		my $rpm = $vals->[$cols{rpm}];
		my $tps = $vals->[$cols{tps}];

		if (abs($rpmdot) > 400 or
				abs($tpsDOT) > 50 or
				($rpm > 3000 and $tps < 5))
		{
			# If this is the first detection
			if (! $in_transient_delay) {
				print "X";
			}
			$in_transient_delay = 1;
			$tran_time = time();
		}

		# Skip this loop if insufficient time has elapsed
		# since the last transient.
		if (time() - $tran_time < $tran_delay) {
			next;
		}
		$in_transient_delay = 0;

		# save the data (while not paused and no transients)
		$rtdata_out->print($vals);

		# The current values of the last rtdata point
		my $afr1     = $vals->[$cols{afr1}];
		my $fuelload = $vals->[$cols{fuelload}];
		my $ver      = $vals->[$cols{veCurr1}];  # ve in rtdata

		# Get the single nearest point.
		#  See Text::LookUpTable for operation of 'lookup_points'
		my $point = ($table->lookup_points($rpm, $fuelload, 0))[0];

		# Get the value for the nearest point we found previously.
		my $vet = $table->get($point->[0], $point->[1]);  # ve in table

		# Point unique identifier (puid).
		# Used to provide a unique id for each point
		# along with the %point_change hash.
		my $puid = $point->[0] . "," . $point->[1];

		#print "ver, vet: $ver, $vet\n" if $DEBUG;

		# Unless this entry has already been defined, initialize it
		unless (exists $point_change{$puid}) {
			# initialize with an expired time so a change will occur
			$point_change{$puid} = time() - ($change_delay + 1);
		}

		# skip if change delay has not elapsed
		if ((time() - $point_change{$puid}) < $change_delay) {
			#print "delay...\n" if $DEBUG;
			#print "~" if $DEBUG;
			next;
		}
		# we can make a change, the time delay has elapsed

		# If the difference is large enough to warrant a change
		my $d = abs($afr1 - $goal_afr1); # delta
		if ($d > 0.2) {

			# Calculate the change
			#
			# Here a linear function is used to produce larger
			# changes with larger deltas and smaller changes
			# with smaller deltas.
			#
			# Using y = m*x + b
			# and two reasonable points
			#   1 = m*0.2 + b  # change is 1 when delta is 0.2
			#   2 = m*1 + b    # change is 2 when delta is 1.0
			# results in the function
			#   y = 1.25*x + 0.75
			#
			my $c = 1.25*$d + 0.75;
			$c = int($c);  # cannot be a floating point number

			# limit the maximum change
			$c = 5 if ($c > 5);

			# If there is a large enough change
			if ($c > 0) {
				# Apply the change to produce new ve value
				my $new_ve;
				if ($afr1 < $goal_afr1) {
					# too rich, lean it out
					print "-";
					$new_ve = $vet - $c;
				} elsif ($afr1 > $goal_afr1) {
					# too lean, richen it up
					print "+";
					$new_ve = $vet + $c;
				}

				# Can't have negative ve values
				$new_ve = 0 if ($new_ve < 0);

				# Can't have too large a value either
				$new_ve = 255 if ($new_ve > 255);

				print "ve ($puid) (old, new): $vet, $new_ve\n" if $DEBUG;

				# also save the ve convergence data
				my $group = $puid;  # Define group in terms of the unique id,
				$group =~ s/,/_/g;  # but don't use ',' because
									#  it conflicts with CSV.
				
				my $t = $vals->[$cols{localtime}];
				print $cve_fh "$t,$new_ve,$group\n";

				$point_change{$puid} = time();  # reset delay
				$table->set($point->[0], $point->[1], $new_ve);
				$has_changes = 1;
			}
		} else {
			#print "=";
		}
	}

	if ($has_changes) {
		$has_changes = 0;  # reset

		$table->save_file();       # save our changes
		`kill -HUP \`cat pid\``;   # tell msqdev update the ecu
	}

	usleep(2e4);    	# slow things down
}
